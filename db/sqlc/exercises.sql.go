// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: exercises.sql

package db

import (
	"context"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercises (
  name, sets, reps
) VALUES (
  $1, $2, $3
)
RETURNING id, name, sets, reps, created_at
`

type CreateExerciseParams struct {
	Name string `json:"name"`
	Sets int16  `json:"sets"`
	Reps int16  `json:"reps"`
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRow(ctx, createExercise, arg.Name, arg.Sets, arg.Reps)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sets,
		&i.Reps,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExercise = `-- name: DeleteExercise :exec
DELETE FROM exercises
WHERE id = $1
`

func (q *Queries) DeleteExercise(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteExercise, id)
	return err
}

const getExercise = `-- name: GetExercise :one
SELECT id, name, sets, reps, created_at FROM exercises
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExercise(ctx context.Context, id int32) (Exercise, error) {
	row := q.db.QueryRow(ctx, getExercise, id)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Sets,
		&i.Reps,
		&i.CreatedAt,
	)
	return i, err
}

const listExercises = `-- name: ListExercises :many
SELECT id, name, sets, reps, created_at FROM exercises
ORDER BY name
`

func (q *Queries) ListExercises(ctx context.Context) ([]Exercise, error) {
	rows, err := q.db.Query(ctx, listExercises)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Exercise{}
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Sets,
			&i.Reps,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExercise = `-- name: UpdateExercise :exec
UPDATE exercises
  set name = $2,
      sets = $3,
      reps = $4

WHERE id = $1
RETURNING id, name, sets, reps, created_at
`

type UpdateExerciseParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
	Sets int16  `json:"sets"`
	Reps int16  `json:"reps"`
}

func (q *Queries) UpdateExercise(ctx context.Context, arg UpdateExerciseParams) error {
	_, err := q.db.Exec(ctx, updateExercise,
		arg.ID,
		arg.Name,
		arg.Sets,
		arg.Reps,
	)
	return err
}
